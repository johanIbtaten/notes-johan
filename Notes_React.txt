Component Lifecycle
-------------------------------
1. Mounting
These methods are called in the following order when an instance of a component is being created and inserted into the DOM :

    constructor()
    static getDerivedStateFromProps()
    render()
    componentDidMount()

2. Updating
An update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered :

    static getDerivedStateFromProps()
    shouldComponentUpdate()
    render()
    getSnapshotBeforeUpdate()
    componentDidUpdate()

3. Unmounting
This method is called when a component is being removed from the DOM :

    componentWillUnmount()

4. Error Handling
These methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component :

    static getDerivedStateFromError()
    componentDidCatch()


Component Lifecycle functions
-------------------------------
componentDidMount() 
est appelée immédiatement après que le composant est monté (inséré dans l’arbre). C’est ici que vous devriez placer les initialisations qui requièrent l’existence de nœuds du DOM. Si vous avez besoin de charger des données depuis un point d’accès distant, c’est aussi le bon endroit pour déclencher votre requête réseau.

componentDidUpdate() 
est appelée immédiatement après que la mise à jour a eu lieu. Cette méthode n’est pas appelée pour le rendu initial.


Stateless Functional Component (Composant fonctionnel sans état)
-------------------------------
1. Composant qui ne fait qu'afficher du contenu
    Ex1:
    // Sans props
    const NotFound = () => {
        return (
            <h2 className="notFound">Y'a rien ici!</h2>
        )
    }

    Ex2:
    // Avec props
    const HelloWorld = (props) => {
      return <p>Hello {props.user}</p>
    }
    // le passage de props à notre composant se fait de la façon suivante en JSX: <HelloWorld user='Gaël' />

    Ex3:
    const Hello = ({ name }) => (<div>Hello, {name}!</div>);

    Ex4:
    // Avec export
    import React from 'react';
    const NotFound = () => {
        return (
            <h2 className="notFound">Y'a rien ici!</h2>
        )
    }
    export default NotFound;


Class Components
-------------------------------
1. Un composant class étend la classe Component de React.
    Ex1:
    class Welcome extends React.Component {
      render() {
        return <h1>Bonjour, {this.props.name}</h1>;
      }
    }
    // le passage de props à notre composant se fait de la façon suivante en JSX: <Welcome name='Gaël' />


Stateful Class Components
-------------------------------
1. Un composant class étend la classe Component de React.
    Ex1:
    // [...]
    // JS PERSO
    import { sampleText } from './sampleText';

    class App extends React.Component {
        state = {
            text: sampleText
        };

        editText = (event) => {
            const text = event.target.value;
            this.setState({ text });
        };

        render() {
            return (
                <div className="container">
                    <div className="row">

                      <div className="col-sm-6">
                        <textarea value={this.state.text} rows="35" className="form-control" onChange={(e) => this.editText(e)} >
                        </textarea>
                      </div>

                      <div className="col-sm-6">
                        <div>{this.state.text}</div>
                        </div>

                    </div>
                </div>
            )
        }

    }

    render(
      <App />,
      document.getElementById('root')
    );
