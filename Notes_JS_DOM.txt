Le DOM
Les interfaces et les objets
Hiérarchie simplifiée des interfaces DOM
Types de données importants
Récupérer un noeud (un élément) du DOM
Local storage et Session storage
preventDefault
stopPropagation
Passer une référence à un gestionnaire d'évènement
La propagation des évènements (Capture et Bubbling)
window.setInterval Fonction
Les événements


Le DOM
-------------------------------
1. Le Document Object Model ou DOM (pour modèle objet de document) est une interface de programmation pour les documents HTML, XML et SVG. 
Il fournit une représentation structurée du document sous forme d'un arbre et définit la façon dont la structure peut être manipulée par les programmes, 
en termes de style et de contenu. Le DOM représente le document comme un ensemble de nœuds et d'objets possédant des propriétés et des méthodes. 
Les nœuds peuvent également avoir des gestionnaires d'événements qui se déclenchent lorsqu'un événement se produit. Cela permet de manipuler 
des pages web grâce à des scripts et/ou des langages de programmation. Les nœuds peuvent être associés à des gestionnaires d'événements. 
Une fois qu'un événement est déclenché, les gestionnaires d'événements sont exécutés.

2. Le DOM est une représentation entièrement orientée objet de la page Web, et peut être manipulé à l'aide d'un langage de script comme JavaScript.

3. Les normes DOM du W3C et WHATWG DOM forment la base du DOM implémenté dans la plupart des navigateurs modernes.
Chacune des propriétés et des méthodes et chacun des évènements disponibles permettant la manipulation et 
la création de pages Web sont organisés dans des objets (par exemple, l'objet document qui représente le document lui-même, 
l'objet table qui implémente l'interface DOM particulière HTMLTableElement permettant d'accéder aux tables HTML, etc.). 
Cette documentation fournit une référence, objet par objet, du DOM implémenté dans les navigateurs basés sur Gecko.

4. En accédant aux éléments document ou window, vous pouvez manipuler le document lui-même ou parcourir les enfants de ces éléments, 
qui sont les divers éléments de la page Web. Votre programmation DOM peut être très simple ou plus sophistiquées pour créer du nouveau contenu par exemple.
    Ex1:
    <body onload="window.alert('Bienvenue sur ma page Web !');">

    Ex2:
    // Cette fonction crée un nouvel élément H1, y ajoute du texte, et ajoute ensuite cet élément à l'arbre du document
    <html>
      <head>
        <script>
          //exécute la fonction lorsque le document est chargé
          window.onload = function() {
            // crée  un couple d'éléments dans une page HTML autrement vide
            var heading = document.createElement("h1");
            var heading_text = document.createTextNode("Big Head!");
            heading.appendChild(heading_text);
            document.body.appendChild(heading);
          }
        </script>
      </head>
      <body>
      </body>
    </html>


Les interfaces et les objets
-------------------------------
1. Dans certains cas, un objet implémente une seule interface. Mais la plupart du temps, un objet comme l'élément HTML table emprunte à plusieurs 
interfaces différentes. Cet objet table par exemple implémente une interface spécialisée HTMLTableElement, dont font partie des méthodes 
comme createCaption et insertRow. Mais comme il s'agit également d'un élément HTML, table implémente aussi l'interface Element. 
Enfin, comme un élément HTML est, du point de vue du DOM, un nœud au sein de l'arbre de nœuds qui forment le modèle objet 
de document pour une page Web ou un document XML, table implémente encore l'interface plus basique Node, dont dérive Element.
    Ex1:
    // Lorsque vous obtiendrez une référence à un objet table, comme dans l'exemple suivant, vous utiliserez régulièrement ces trois interfaces de manière 
    // interchangeable sur l'objet, peut-être même sans le savoir.
    var table = document.getElementById("table");
    var tableAttrs = table.attributes; // Interface Node/Element
    for(var i = 0; i < tableAttrs.length; i++){
      // Interface HTMLTableElement : attribut border
      if(tableAttrs[i].nodeName.toLowerCase() == "border")
        table.border = "1";
    }
    // Interface HTMLTableElement : attribut summary
    table.summary = "note : bordure plus large";


Hiérarchie simplifiée des interfaces DOM
-------------------------------
DOMImplementation
NamedNodeMap
NodeList
DOMException
AbstractView
    Window
EventTarget
    Node
        DocumentFragment
        DocumentType
        ProcessingInstruction
        Attr
        Document
        Element
            HTMLElement
                HTMLTableElement
                HTMLAnchorElement
                HTMLAppletElement
                HTMLAreaElement
                HTMLBaseElement
                HTMLBaseFontElement
                HTMLBlockquoteElement
                HTMLBodyElement
                HTMLBRElement
                HTMLButtonElement
                HTMLDirectoryElement
                HTMLDivElement
                HTMLDListElement
                HTMLFieldSetElement
                HTMLFontElement
                HTMLFormElement
                HTMLFrameElement
                etc...
        CharacterData            
            Comment
            Text
                CDATASection



Types de données importants
-------------------------------
1. Document
Lorsqu'un membre renvoie un objet de type document (par exemple la propriété ownerDocument d'un élément, qui retourne le document auquel il appartient), 
cet objet est l'objet document racine lui-même.

2. Element
element se réfère à un élément ou à un nœud de type element renvoyé par un membre de l'API DOM. 
Plutôt que de dire, par exemple que la méthode document.createElement() renvoie une référence à un objet node, 
nous dirons simplement que cette méthode renvoie l'element qui vient d'être créé dans le DOM. 
Les objets element implémentent l'interface DOM Element, mais aussi l'interface plus basique Node

3. NodeList
Une nodeList est un tableau d'éléments, comme celui qui est renvoyé par la méthode document.getElementsByTagName(). 
Les éléments d'une nodeList sont accessibles par un index de deux manières différentes :
list.item(1)
list[1]
Ces deux lignes sont équivalentes. Dans la première, item() est la méthode de l'objet nodeList. 
La seconde utilise la syntaxe habituelle d'un tableau pour accéder au second élément de la liste.
Bien que NodeList ne soit pas un tableau (Array), il est possible d'itérer dessus en utilisant forEach(). 
Il peut également être converti en tableau (Array) en utilisant Array.from().

In some cases, the NodeList is live, which means that changes in the DOM automatically update the collection.
    Ex1:
    // Node.childNodes is live
    var parent = document.getElementById('parent');
    var child_nodes = parent.childNodes;
    console.log(child_nodes.length); // let's assume "2"
    parent.appendChild(document.createElement('div'));
    console.log(child_nodes.length); // outputs "3"
In other cases, the NodeList is static, where any changes in the DOM does not affect the content of the collection. 
document.querySelectorAll() returns a static NodeList.
Il est bon de garder cette distinction à l'esprit pour choisir la façon de parcourir les éléments de la liste des nœuds et, en particulier, 
pour mettre en cache la longueur de la liste.

4. Attribute
Lorsqu'un attribute est renvoyé par un membre (par exemple par la méthode createAttribute()), 
il s'agit d'une référence à un objet qui expose une interface particulière (et limitée) aux attributs. 
Les attributs sont des nœuds dans le DOM tout comme les éléments, mais ils seront rarement utilisés de cette manière.

5. NamedNodeMap
Une namedNodeMap est comme un tableau, mais où l'on peut accéder aux éléments à la fois par nom ou par index. 
Cette dernière possibilité est cependant juste là pour faciliter l'énumération, car la liste n'est pas dans un ordre particulier. 
Une namedNodeMap a une méthode item() pour la même raison, et il est également possible d'ajouter et de retirer des élements d'une namedNodeMap.


Récupérer un noeud (un élément) du DOM (Document Object Model)
-------------------------------
Il est aussi possible de récupérer des éléments ou des collections à partir soit de l'objet document, soit d'un objet HTMLElement.

1. document.getElementById(id) (renvoie un élément)
    [id]
    L'ID (identifiant) de l'élément à localiser. Il est une chaîne de caractères sensible à la casse qui est unique ; un seul élément peut avoir un ID donné.
    Valeur de retour
    Un objet Element décrivant l'objet élément du DOM correspondant à l'ID spécifié ou null si aucun n'a été trouvé dans le document.

Récupère l'élément dont l'identifiant vaut la valeur passée en paramètre. Cette méthode ne renvoie qu'un élément car un id doit être unique dans le document. 
Ne s'applique qu'à l'objet document.
S'il n'y a pas d'élément avec l'id fourni, cette fonction retourne null. A noter que le paramètre id est sensible à la casse, ainsi document.getElementById("Main") 
retournera null au lieu de l'élément <div id="main"> étant donné que "M" et "m" sont différents pour cette méthode.
Les éléments absents du document ne sont pas cherchés par getElementById(). Quand vous créez un élément et y assignez un ID, vous devez insérer l'élément 
dans l'arbre du document avec Node.insertBefore() ou une méthode similaire avant de pouvoir y accéder avec getElementById() :
    Ex1:
    <html>
    <head>
      <title>getElementById example</title>
    </head>
    <body>
      <p id="para">Some text here</p>
      <button onclick="changeColor('blue');">blue</button>
      <button onclick="changeColor('red');">red</button>
    </body>
    </html>
    function changeColor(newColor) {
      var elem = document.getElementById('para');
      elem.style.color = newColor;
    }

    Ex2:
    var element = document.createElement('div');
    element.id = 'testqq';
    var el = document.getElementById('testqq'); // el vaudra null !

2. getElementsByName(name) (renvoie une collection NodeList live) 
Récupère tous les éléments du document ayant un attribut HTML name correspondant au paramètre passé.
    [name]
    name est la valeur de l'attribut name des éléments.
    Valeur de retour
    A live NodeList Collection, meaning it automatically updates as new elements 
    with the same name are added to/removed from the document.
    
    Ex1:
  <!DOCTYPE html>
  <html lang="en">
    <head>
    ...
    </head>
    <body>
      <form name="up"><input type="text"></form>
      <div name="down"><input type="text"></div>
      <script>
      var up_forms = document.getElementsByName("up");
      console.log(up_forms[0].tagName); // retourne "FORM"
      </script>
    </body>
  </html>


3. getElementsByTagName(name) (renvoie une collection)
Récupère tous les éléments du document dont le nom de balise correspond au paramètre passé.

5. getElementsByClassName(classe) (renvoie une collection)
Récupère tous les éléments du document ayant un attribut HTML class correspondant au paramètre passé.

5. querySelector(sélecteur CSS) (renvoie un élément)
cette méthode prend en paramètre une chaine de caractères correspondant à une syntaxe de sélecteur CSS et 
renvoie le premier élément du document correspondant à ce sélecteur.

6. querySelectorAll(sélecteur CSS) (renvoie une collection)
cette méthode prend en paramètre une chaine de caractères correspondant à une syntaxe de sélecteur CSS et 
renvoie tous les éléments du document correspondant à ce sélecteur.


Local storage et Session storage
-------------------------------
1. Local storage enregistre des chaines de caractères dans le navigateur
pour créer une persistance des données même si on ferme le navigateur.

  Ex1:
  // On crée un objet JS
  const myObjectToStorage = { name: 'Johan'}

  // On le stocke dans le localStorage avec une clé et... 
  // ...sous forme d'une chaine de caractère
  window.localStorage.setItem(
    'myItem', 
    JSON.stringify(myObjectToStorage)
  )

  // On récupère la chaine de caractère stockée dans le localStorage
  const myRetrievedString = JSONwindow.localStorage.getItem('myItem') // "{'name':'Johan'}"

  // On récupère notre objet JS à partir de la chaine de caractère stockée
  const myRetrievedObject = JSON.parse(myRetrievedString) 
  // { name: 'Johan'}


2. Session storage enregistre des chaines de caractères dans le navigateur
comme localStorage à la différence que l'information ne dure que pendant la durée 
de session du navigateur. La fermeture de la fenêtre entraînera donc la perte de l'information.
Il convient également de noter que sessionStorage ne sert qu'à la fenêtre que vous visualisez. 
Si l'utilisateur ouvre un lien d'application dans une nouvelle fenêtre ou un nouveau TAB, 
cette information ne sera pas disponible non plus.

3. localStorage et sessionStorage sont utiles pour la persistance d'informations non sensibles entre les pages. Des informations sensibles telles que des mots de passe ou des informations susceptibles de compromettre la sécurité des utilisateurs ne doivent jamais être stockées.


preventDefault
-------------------------------
1. Pour les types d'événements qui l'autorisent, il est possible grâce à cette méthode d'annuler l'action implicite correspondante. Par exemple, l'action implicite associée à un événement de type submit est l'envoi au serveur du formulaire concerné.

  EX:
  function envoiForm(event) {
    if (this.elements.adresse.value === "") {
      alert("L'adresse est vide.");
      event.preventDefault();
    }
  }

  var formulaire = document.getElementById("coordonnees");
  formulaire.addEventListener("submit", envoiForm, false);


stopPropagation
-------------------------------
1. Cette méthode permet d'arrêter la propagation de l'événement dans l'arbre DOM après le nœud sur lequel il se trouve. Les parents de ce noeud ne
reçoivent pas l'événement.

  EX:
  document.getElementById("test").addEventListener("click", function( event ) {
    event.stopPropagation();
  }, false);


Passer une référence à un gestionnaire d'évènement
-------------------------------
1. Il faut passer une référence à un gestionnaire d'évènement et non exécuter la fonction
  EX:
  // Dans react

  updateTitle() {
      console.log('I am an updated title')
  }

  // Exécute la fonction updateTitle() une fois
  // Si on clique sur le bouton rien ne se passe
  <button onClick={this.updateTitle()}>Change title</button> 

  // On passe la référence de la méthode updateTitle au gestionnaire
  // Cette fois le click sur le bouton appelle bien la méthode
  <button onClick={this.updateTitle}>Change title</button>


La propagation des évènements (Capture et Bubbling)
-------------------------------
1. Les phases de capture (Capture phase) et de bouillonnement (Bubbling phase).

Lorsqu’un évènement se déclenche, celui-ci va en fait naviguer à travers le DOM et passer à travers 
les différents gestionnaires d’évènement disposés dans le document. On dit également que l’évènement se « propage » dans le DOM.

Cette propagation va se faire selon différentes phases qu’on appelle phase de capture et phase de bouillonnement.

Ici, vous devez bien comprendre qu’un évènement (représenté en JavaScript par un objet) va toujours 
suivre le même chemin en JavaScript : il va toujours se propager en partant de l’ancêtre le plus lointain par rapport à la cible de l’évènement jusqu’à la cible de l’évènement puis faire le chemin inverse.

Par exemple, lorsqu’un utilisateur clique sur le paragraphe de notre exemple précédent, 
ce paragraphe est la cible de l’évènement.

L’évènement click va se propager en partant de l’ancêtre le plus lointain du paragraphe, 
c’est-à-dire en partant de l’élément html puis en traversant les ancêtres de 
l’élément p un à un (body puis div) jusqu’à arriver à cet élément p.

Une fois arrivé à l’élément p, l’objet évènement va faire le chemin inverse et remonter dans 
l’arborescence du DOM de cet élément p jusqu’à l’ancêtre le plus lointain, c’est-à-dire 
traverser l’élément div, puis l’élément body, puis finalement l’élément html.

Cette première phase de descente dans l’arbre du DOM est ce qu’on appelle la phase de 
capture. La deuxième phase de remontée est appelée phase de bouillonnement.

Ici, une chose devrait vous interpeller : si la phase de capture se passe avant la 
phase de bouillonnement, l’évènement devrait atteindre le gestionnaire d’évènement 
du div avant celui du paragraphe et donc celui-ci devrait se déclencher en premier 
alors pourquoi est-ce le contraire qui s’est passé dans l’exemple précédent ?

Cela est dû au fait que les gestionnaires d’évènements sont par défaut configurés 
pour ne s’exécuter (ou pour ne « répondre ») que dans la phase de bouillonnement et pour ignorer la phase de capture.

Vous pourriez alors vous poser la question suivante : pourquoi avoir implémenté 
deux phases différentes si tous les évènements utilisent par défaut la phase de bouillonnement ?

Comme souvent, la réponse est la suivante : les raisons sont historiques. En effet, 
vous devez bien comprendre que chaque langage de programmation porte avec lui un bagage historique. 
Ce bagage historique provient de deux grands facteurs : des choix faits précédemment 
dans la structure du langage et sur lesquels les créateurs sont revenus aujourd’hui 
(le mot clef var abandonné au profit de let par exemple) et la résolution des anciens 
problèmes de compatibilité entre les navigateurs (en effet, le temps n’est pas si loin 
où chaque navigateur majeur implémentait une même fonctionnalité différemment.

Dans le cas des phases de capture et de bouillonnement, on doit cela au fait qu’à l’époque 
certains navigateurs utilisaient la phase de capture et d’autres utilisaient la phase de bouillonnement. 
Quand le W3C a décidé d’essayer de normaliser le comportement et de parvenir à un consensus, 
ils en sont arrivés à ce système qui inclue les deux.

2. Choisir la phase du gestionnaire d’évènement.

Pour choisir dans quelle phase un gestionnaire d’évènement doit se déclencher, 
nous allons pouvoir passer un troisième argument booléen à la méthode addEventListener().

Par défaut, la valeur de cet argument est false ce qui indique que le gestionnaire 
d’évènement doit ignorer la phase de capture. Pour lui demander de réagir à la phase de capture, 
on va donc devoir lui passer la valeur true.

  ////////////////////////////////////// EX:
  <div id="parentCapt1">
      <span id="enfantCapt2">
        Cliquez-moi pour la phase de capture. 
        Les listeners sur les parents vont réagir à l'événement 
        avant les listeners sur les enfants.
      </span>
  </div>

  <div id="parentBoul1">
      <span id="enfantBoul2">
        Cliquez-moi pour la phase de bouillonnement. 
        Les listeners sur les enfants vont réagir à l'événement 
        avant les listeners sur les parents.
      </span>
  </div>

  <script>
      var parentCapt1 = document.getElementById('parentCapt1'),
          enfantCapt2 = document.getElementById('enfantCapt2'),
          parentBoul1 = document.getElementById('parentBoul1'),
          enfantBoul2 = document.getElementById('enfantBoul2');
    
      parentCapt1.addEventListener('click', function() {
          alert("L'événement du div vient de se déclencher.");
      }, true);
    
      enfantCapt2.addEventListener('click', function() {
          alert("L'événement du span vient de se déclencher.");
      }, true);
    
      parentBoul1.addEventListener('click', function() {
          alert("L'événement du div vient de se déclencher.");
      }, false);
    
      enfantBoul2.addEventListener('click', function() {
          alert("L'événement du span vient de se déclencher.");
      }, false);
  </script>


window.setInterval Fonction
-------------------------------
1. Appelle une fonction de manière répétée, avec un certain délai fixé entre chaque appel.

intervalID = window.setInterval(fonction,delai[,param1,param2, ...]);
intervalID = window.setInterval(code,delai);

  [intervalID] 
  est un ID unique d'intervalle qui peut être passé à window.clearInterval().

  [fonction] 
  est la fonction qui doit être appelée de manière répétée.

  [code] 
  dans la syntaxe alternative, est une chaîne représentant le code à exécuter de manière répétée.

  [delai] 
  est le nombre de millisecondes (millièmes de seconde) que setInterval() doit attendre avant chaque appel de fonction. 
  Si delai est inférieur à 10, la valeur utilisée est ramenée à 10.

  Notez que le passage de paramètres supplémentaires à la fonction dans la première syntaxe ne fonctionne pas dans Internet Explorer.
    
EX:
var intervalID = window.setInterval(animation, 500);

EX:
// L'exemple qui suit continuera à appeler la fonction flashtext() toutes les secondes, 
// jusqu'à ce que intervalID soit réinitialisé en cliquant sur le bouton Stop.
<!DOCTYPE html>
<html>
  <head>
    <title>setInterval/clearInterval example</title>

    <script>
      var intervalID;

      function changeCouleur() {
        intervalID = setInterval(flashText, 1000);
      }

      function flashText() {
        var elem = document.getElementById("ma_boite");

        if (elem.style.color == 'red') {
          elem.style.color = 'blue';
        } else {
          elem.style.color = 'red';
        }
      }

      function stopTextColor() {
        clearInterval(intervalID);
      }
    </script>
  </head>

  <body onload="changeCouleur();">
    <div id="ma_boite">
      <p>Salut tout le monde</p>
    </div>
    <button onclick="stopTextColor();">Stop</button>
  </body>
</html>


Les événements
-------------------------------
Voir https://www.xul.fr/ecmascript/event.php

x.addEventListener('click', fonction, false)

// On peut associer plusieurs fonctions à un évènement et un même élément.
// Il faut noter que l'ordre de déclenchement peut être aléatoire.
x.addEventListener('click', fonction1, false);
x.addEventListener('click', fonction2, false);

1er paramètre
  Le nom d'un évènement est une DOMString
  L'argument DOMString est une chaîne qui reprend le nom d'un évènement standard. Les évènements reconnus pour la souris sont:
  click
  mousedown
  mouseup
  mouseover
  mousemove
  mouseout
  Pour le clavier (DOM 3):
  keydown
  keypress (toutes les touches ne sont pas reconnues)
  keyup
  DOM 3 reconnaît d'autres types d'évènements.

Second paramètre
  Une fonction qui un EventListener
  Le "listener" (écouteur) peut être une fonction définie par l'utilisateur ou un objet implémentant l'interface EventListener.
  Pour passer des paramètres à la fonction, on utilise une fonction anonyme.

Troisième paramètre
  Une valeur booléenne: mode capture ou non
  Elle concerne la capture des évènements du type donné. On mettra false si on n'en ne le veut pas.
  Par défaut c'est false la phase de Capture est désactivée et la phase de Bubbling est activée. Si c'est true la phase Capture est activée.
  Si la valeur est vraie, tous les évènements du type spécifié ici seront passés d'abord à l'EventListener ici avant d'être passés aux autres EventTarget des balises qu'il contient. En clair la propagation se fera des balises conteneurs d'abord puis les balises qu'elles contiennent ensuite. Par défaut c'est l'inverse.

1. Attacher directement l'évènement à un élément
Les évènements sont toujours remontés dans ce cas, on ne peut choisir le mode de propagation.
  ////////////////////////////////////// EX:
  var x = documentGetElementById("mabalise");
  x.onclick = function(evt) { ... }
  // ou
  function clickHandler(evt) { ... };
  x.onclick = clickHandler;

2. Attaché un écouteur d'événement à un élément
  ////////////////////////////////////// EX:
  var element = document.getElementById('clickme');
  element.addEventListener('click', function() {
      alert("Vous m'avez cliqué !");
  });