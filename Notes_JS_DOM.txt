    Le DOM
    Les interfaces et les objets
    Hiérarchie simplifiée des interfaces DOM
    Types de données importants
    Récupérer un noeud (un élément) du DOM
    Local storage et Session storage


Le DOM
-------------------------------
1. Le Document Object Model ou DOM (pour modèle objet de document) est une interface de programmation pour les documents HTML, XML et SVG. 
Il fournit une représentation structurée du document sous forme d'un arbre et définit la façon dont la structure peut être manipulée par les programmes, 
en termes de style et de contenu. Le DOM représente le document comme un ensemble de nœuds et d'objets possédant des propriétés et des méthodes. 
Les nœuds peuvent également avoir des gestionnaires d'événements qui se déclenchent lorsqu'un événement se produit. Cela permet de manipuler 
des pages web grâce à des scripts et/ou des langages de programmation. Les nœuds peuvent être associés à des gestionnaires d'événements. 
Une fois qu'un événement est déclenché, les gestionnaires d'événements sont exécutés.

2. Le DOM est une représentation entièrement orientée objet de la page Web, et peut être manipulé à l'aide d'un langage de script comme JavaScript.

3. Les normes DOM du W3C et WHATWG DOM forment la base du DOM implémenté dans la plupart des navigateurs modernes.
Chacune des propriétés et des méthodes et chacun des évènements disponibles permettant la manipulation et 
la création de pages Web sont organisés dans des objets (par exemple, l'objet document qui représente le document lui-même, 
l'objet table qui implémente l'interface DOM particulière HTMLTableElement permettant d'accéder aux tables HTML, etc.). 
Cette documentation fournit une référence, objet par objet, du DOM implémenté dans les navigateurs basés sur Gecko.

4. En accédant aux éléments document ou window, vous pouvez manipuler le document lui-même ou parcourir les enfants de ces éléments, 
qui sont les divers éléments de la page Web. Votre programmation DOM peut être très simple ou plus sophistiquées pour créer du nouveau contenu par exemple.
    Ex1:
    <body onload="window.alert('Bienvenue sur ma page Web !');">

    Ex2:
    // Cette fonction crée un nouvel élément H1, y ajoute du texte, et ajoute ensuite cet élément à l'arbre du document
    <html>
      <head>
        <script>
          //exécute la fonction lorsque le document est chargé
          window.onload = function() {
            // crée  un couple d'éléments dans une page HTML autrement vide
            var heading = document.createElement("h1");
            var heading_text = document.createTextNode("Big Head!");
            heading.appendChild(heading_text);
            document.body.appendChild(heading);
          }
        </script>
      </head>
      <body>
      </body>
    </html>


Les interfaces et les objets
-------------------------------
1. Dans certains cas, un objet implémente une seule interface. Mais la plupart du temps, un objet comme l'élément HTML table emprunte à plusieurs 
interfaces différentes. Cet objet table par exemple implémente une interface spécialisée HTMLTableElement, dont font partie des méthodes 
comme createCaption et insertRow. Mais comme il s'agit également d'un élément HTML, table implémente aussi l'interface Element. 
Enfin, comme un élément HTML est, du point de vue du DOM, un nœud au sein de l'arbre de nœuds qui forment le modèle objet 
de document pour une page Web ou un document XML, table implémente encore l'interface plus basique Node, dont dérive Element.
    Ex1:
    // Lorsque vous obtiendrez une référence à un objet table, comme dans l'exemple suivant, vous utiliserez régulièrement ces trois interfaces de manière 
    // interchangeable sur l'objet, peut-être même sans le savoir.
    var table = document.getElementById("table");
    var tableAttrs = table.attributes; // Interface Node/Element
    for(var i = 0; i < tableAttrs.length; i++){
      // Interface HTMLTableElement : attribut border
      if(tableAttrs[i].nodeName.toLowerCase() == "border")
        table.border = "1";
    }
    // Interface HTMLTableElement : attribut summary
    table.summary = "note : bordure plus large";


Hiérarchie simplifiée des interfaces DOM
-------------------------------
DOMImplementation
NamedNodeMap
NodeList
DOMException
AbstractView
    Window
EventTarget
    Node
        DocumentFragment
        DocumentType
        ProcessingInstruction
        Attr
        Document
        Element
            HTMLElement
                HTMLTableElement
                HTMLAnchorElement
                HTMLAppletElement
                HTMLAreaElement
                HTMLBaseElement
                HTMLBaseFontElement
                HTMLBlockquoteElement
                HTMLBodyElement
                HTMLBRElement
                HTMLButtonElement
                HTMLDirectoryElement
                HTMLDivElement
                HTMLDListElement
                HTMLFieldSetElement
                HTMLFontElement
                HTMLFormElement
                HTMLFrameElement
                etc...
        CharacterData            
            Comment
            Text
                CDATASection



Types de données importants
-------------------------------
1. Document
Lorsqu'un membre renvoie un objet de type document (par exemple la propriété ownerDocument d'un élément, qui retourne le document auquel il appartient), 
cet objet est l'objet document racine lui-même.

2. Element
element se réfère à un élément ou à un nœud de type element renvoyé par un membre de l'API DOM. 
Plutôt que de dire, par exemple que la méthode document.createElement() renvoie une référence à un objet node, 
nous dirons simplement que cette méthode renvoie l'element qui vient d'être créé dans le DOM. 
Les objets element implémentent l'interface DOM Element, mais aussi l'interface plus basique Node

3. NodeList
Une nodeList est un tableau d'éléments, comme celui qui est renvoyé par la méthode document.getElementsByTagName(). 
Les éléments d'une nodeList sont accessibles par un index de deux manières différentes :
list.item(1)
list[1]
Ces deux lignes sont équivalentes. Dans la première, item() est la méthode de l'objet nodeList. 
La seconde utilise la syntaxe habituelle d'un tableau pour accéder au second élément de la liste.
Bien que NodeList ne soit pas un tableau (Array), il est possible d'itérer dessus en utilisant forEach(). 
Il peut également être converti en tableau (Array) en utilisant Array.from().

In some cases, the NodeList is live, which means that changes in the DOM automatically update the collection.
    Ex1:
    // Node.childNodes is live
    var parent = document.getElementById('parent');
    var child_nodes = parent.childNodes;
    console.log(child_nodes.length); // let's assume "2"
    parent.appendChild(document.createElement('div'));
    console.log(child_nodes.length); // outputs "3"
In other cases, the NodeList is static, where any changes in the DOM does not affect the content of the collection. 
document.querySelectorAll() returns a static NodeList.
Il est bon de garder cette distinction à l'esprit pour choisir la façon de parcourir les éléments de la liste des nœuds et, en particulier, 
pour mettre en cache la longueur de la liste.

4. Attribute
Lorsqu'un attribute est renvoyé par un membre (par exemple par la méthode createAttribute()), 
il s'agit d'une référence à un objet qui expose une interface particulière (et limitée) aux attributs. 
Les attributs sont des nœuds dans le DOM tout comme les éléments, mais ils seront rarement utilisés de cette manière.

5. NamedNodeMap
Une namedNodeMap est comme un tableau, mais où l'on peut accéder aux éléments à la fois par nom ou par index. 
Cette dernière possibilité est cependant juste là pour faciliter l'énumération, car la liste n'est pas dans un ordre particulier. 
Une namedNodeMap a une méthode item() pour la même raison, et il est également possible d'ajouter et de retirer des élements d'une namedNodeMap.


Récupérer un noeud (un élément) du DOM (Document Object Model)
-------------------------------
Il est aussi possible de récupérer des éléments ou des collections à partir soit de l'objet document, soit d'un objet HTMLElement.

1. document.getElementById(id) (renvoie un élément)
    [id]
    L'ID (identifiant) de l'élément à localiser. Il est une chaîne de caractères sensible à la casse qui est unique ; un seul élément peut avoir un ID donné.
    Valeur de retour
    Un objet Element décrivant l'objet élément du DOM correspondant à l'ID spécifié ou null si aucun n'a été trouvé dans le document.

Récupère l'élément dont l'identifiant vaut la valeur passée en paramètre. Cette méthode ne renvoie qu'un élément car un id doit être unique dans le document. 
Ne s'applique qu'à l'objet document.
S'il n'y a pas d'élément avec l'id fourni, cette fonction retourne null. A noter que le paramètre id est sensible à la casse, ainsi document.getElementById("Main") 
retournera null au lieu de l'élément <div id="main"> étant donné que "M" et "m" sont différents pour cette méthode.
Les éléments absents du document ne sont pas cherchés par getElementById(). Quand vous créez un élément et y assignez un ID, vous devez insérer l'élément 
dans l'arbre du document avec Node.insertBefore() ou une méthode similaire avant de pouvoir y accéder avec getElementById() :
    Ex1:
    <html>
    <head>
      <title>getElementById example</title>
    </head>
    <body>
      <p id="para">Some text here</p>
      <button onclick="changeColor('blue');">blue</button>
      <button onclick="changeColor('red');">red</button>
    </body>
    </html>
    function changeColor(newColor) {
      var elem = document.getElementById('para');
      elem.style.color = newColor;
    }

    Ex2:
    var element = document.createElement('div');
    element.id = 'testqq';
    var el = document.getElementById('testqq'); // el vaudra null !

2. getElementsByName(name) (renvoie une collection NodeList live) 
Récupère tous les éléments du document ayant un attribut HTML name correspondant au paramètre passé.
    [name]
    name est la valeur de l'attribut name des éléments.
    Valeur de retour
    A live NodeList Collection, meaning it automatically updates as new elements 
    with the same name are added to/removed from the document.
    
    Ex1:
  <!DOCTYPE html>
  <html lang="en">
    <head>
    ...
    </head>
    <body>
      <form name="up"><input type="text"></form>
      <div name="down"><input type="text"></div>
      <script>
      var up_forms = document.getElementsByName("up");
      console.log(up_forms[0].tagName); // retourne "FORM"
      </script>
    </body>
  </html>


3. getElementsByTagName(name) (renvoie une collection)
Récupère tous les éléments du document dont le nom de balise correspond au paramètre passé.

5. getElementsByClassName(classe) (renvoie une collection)
Récupère tous les éléments du document ayant un attribut HTML class correspondant au paramètre passé.

5. querySelector(sélecteur CSS) (renvoie un élément)
cette méthode prend en paramètre une chaine de caractères correspondant à une syntaxe de sélecteur CSS et 
renvoie le premier élément du document correspondant à ce sélecteur.

6. querySelectorAll(sélecteur CSS) (renvoie une collection)
cette méthode prend en paramètre une chaine de caractères correspondant à une syntaxe de sélecteur CSS et 
renvoie tous les éléments du document correspondant à ce sélecteur.


Local storage et Session storage
-------------------------------
1. Local storage enregistre des chaines de caractères dans le navigateur
pour créer une persistance des données même si on ferme le navigateur.

  Ex1:
  // On crée un objet JS
  const myObjectToStorage = { name: 'Johan'}

  // On le stocke dans le localStorage avec une clé et... 
  // ...sous forme d'une chaine de caractère
  window.localStorage.setItem(
    'myItem', 
    JSON.stringify(myObjectToStorage)
  )

  // On récupère la chaine de caractère stockée dans le localStorage
  const myRetrievedString = JSONwindow.localStorage.setItem('myItem') // "{'name':'Johan'}"

  // On récupère notre objet JS à partir de la chaine de caractère stockée
  const myRetrievedObject = JSON.parse(myRetrievedString) 
  // { name: 'Johan'}


2. Session storage enregistre des chaines de caractères dans le navigateur
comme localStorage à la différence que l'information ne dure que pendant la durée 
de session du navigateur. La fermeture de la fenêtre entraînera donc la perte de l'information.
Il convient également de noter que sessionStorage ne sert qu'à la fenêtre que vous visualisez. 
Si l'utilisateur ouvre un lien d'application dans une nouvelle fenêtre ou un nouveau TAB, 
cette information ne sera pas disponible non plus.

3. localStorage et sessionStorage sont utiles pour la persistance d'informations non sensibles entre les pages. Des informations sensibles telles que des mots de passe ou des informations susceptibles de compromettre la sécurité des utilisateurs ne doivent jamais être stockées.
