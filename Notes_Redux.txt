Install Redux
Using Object Spread Operator in reducer
Action creator
Action type
Reducer
mapStateToProps
mapDispatchToProps
connect()
React Developer Tools (Extension Chrome)

Install Redux
-------------------------------

Using Object Spread Operator in reducer
-------------------------------
1. On ne doit pas modifier le state original dans un reducer mais une copie
    Ex1:
    // Avec Object.assign
    import { VisibilityFilters } from './actions'

    const initialState = {
      visibilityFilter: VisibilityFilters.SHOW_ALL,
      todos: []
    }

    function todoApp(state = initialState, action) {
      switch (action.type) {
        case SET_VISIBILITY_FILTER:
          return Object.assign({}, state, {
            visibilityFilter: action.filter
          })
        default:
          return state
      }
    }

    Ex2:
    // Avec Object.assign
    import { VisibilityFilters } from './actions'

    const initialState = {
      visibilityFilter: VisibilityFilters.SHOW_ALL,
      todos: []
    }

    function todoApp(state = initialState, action) {
      switch (action.type) {
        case SET_VISIBILITY_FILTER:
          return { ...state, visibilityFilter: action.filter }
        default:
          return state
      }
    }


Action creator
-------------------------------
1. C'est une fonction qui créer un action qui pourra ensuite être dispatchée
    Ex1:
    export const setCurrentUser = user => ({
      type: 'SET_CURRENT_USER',
      payload: user
    })
    // user est le paramètre que l'on souhaite passer au payload...
    // ...qui lui même sera passé au reducer
    // type est le nom de l'action qui permettra de l'identifier dans...
    // ...le reducer


Reducer
-------------------------------
1. Le reducer spécifie comment le state de l'application change en réponse aux actions envoyées au store.
    Ex1:
    const INITIAL_STATE = {
      currentUser: null
    }

    const userReducer = (state = INITIAL_STATE, action) => {
      switch (action.type) {
        case 'SET_CURRENT_USER':
          return {
            ...state,
            currentUser: action.payload
          }
        default:
          return state;
      }
    }
    // On retourne le state associé au user avec les propriétés qui changent selon l'action


Action type
-------------------------------
1. Objet qui liste les noms des actions pour les utiliser dans les actions et le reducer
    Ex1:
    // Dans cart.types.js
    const CartActionTypes = {
      TOGGLE_CART_HIDDEN: 'TOGGLE_CART_HIDDEN'
    }

    // Dans cart.actions.js
    import CartActionTypes from './cart.types'

    export const toggleCartHidden = user => ({
      type: CartActionTypes.TOGGLE_CART_HIDDEN
    })

    // Dans cart.reducer.js
    import CartActionTypes from './cart.types'

    const INITIAL_STATE = {
      hidden: true
    }
    const cartReducer = (state = INITIAL_STATE, action) => {
      switch (action.type) {
        case CartActionTypes.TOGGLE_CART_HIDDEN:
          return {
            ...state,
            hidden: !state.hidden
          }
        default:
          return state;
      }
    }


mapStateToProps
-------------------------------
1. Permet de placer les données du store dans les props du composant
pour pouvoir les utiliser
    Ex1:
    const mapStateToProps = state => ({
      currentUser: state.user.currentUser
    })
    // state represente le store de redux
    // state.user représente le reducer qui correspond à la partie du store...
    // ...qui décrit le user
    // state.user.currentUser la donnée qui se trouve dans le state user
    // currentUser : repésente le nom de la Props qui sera transmise au composant

    Ex2:
    const mapStateToProps = ({ user: { currentUser } }) => ({
      currentUser
    }
    // On destructure le state de redux pour obtenir state.user.currentUser
    // currentUser écrit seul dans l'objet  équivaut à currentUser: currentUser

    Ex3:
    const mapStateToProps = ({ user: { currentUser }, cart: { hidden } }) => ({
      currentUser,
      hidden
    }
    // On destructure le state de redux pour obtenir state.user.currentUser et state.cart.hidden


mapDispatchToProps
-------------------------------
1. Permet de passer une fonction dans les props du composant qui permettra de dispatcher
une action aux différents reducers. Cette fonction peut prendre un paramètre qui sera mis
dans le payload de l'action. 
    Ex1:
    // Composant App

    const {setCurrentUser} = this.props // destructuring des props  

    setCurrentUser({
      currentUser: userAuth
    })
    // On dispatch l'action setCurrentUser au reducer en lui passant un objet
    // en paramètre qui correspond à un user


    const mapDispatchToProps = dispatch => ({
      setCurrentUser: user => dispatch(setCurrentUser(user))
    })
    // setCurrentUser: est le nom de la props qui sera passer au composant
    // setCurrentUser(user) est le nom de l'action creator avec son paramètre qui sera...
    // ... transmis au payload


connect()
-------------------------------
1. Permet de connecter un composant au store pour qu'il puisse accéder à ses données
    Ex1:
    // Composant Header

    const mapStateToProps = state => ({
      currentUser: state.user.currentUser
    })

    export default connect(mapStateToProps)(Header)
    // On connect mapStateToProps au composant Header pour pouvoir lire le state

    Ex2:
    // Composant App

    const mapDispatchToProps = dispatch => ({
      setCurrentUser: user => dispatch(setCurrentUser(user))
    })

    export default connect(null, mapDispatchToProps)(Header)
    // On connect mapDispatchToProps au composant App pour pouvoir modifier le state...
    // ...grâce aux actions
    // Comme on utilise pas de mapDispatchToProps le 1er argument connect est null


React Developer Tools (Extension Chrome)
-------------------------------
const store = createStore(
    rootReducer, 
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
    // Code à placer dans createStore    
);
