Terminal Windows
=================================
- Créer un dossier
- Créer un fichier
- Lister des fichiers
- Afficher le chemin complet d'un dossier
- Se rendre dans un dossier spécifique
- Nettoyer la console
- Revenir à l'invite de commande
- Ecrire dans un fichier
- Afficher le contenu d'un fichier

Commandes Git groupées usuelles
=================================

Github
=================================
- Clone repository dans un dossier local (Un dossier est créé avec le nom du repo)
- Pushing to a remote repository
- Adding a remote in the directory your repository is stored at
- Create a new local repository on the command line
- Push an existing repository from the command line
- Clone a Git repository into a specific folder. If you are in the directory you want.
- Associer un commit à une issue dans Github
- Visualiser les branches et les commits

Git
=================================
- Lexique
- Git Workflow
- Initialiser un dépôt Git local
- Configurer Git
- Aide de Git
- Executer plusieurs commandes git à la suite
- Le fichier .gitignore
- Force overwrite of local file with what's it origin repo
- Supprimer un repository local
- Connaitre le status des fichiers (Modifié, Ajouté, Supprimé, etc.)
- Stager des fichiers
- Unstager des fichiers
- Voir la différence entre un fichier modifié unstagé et la dernière version stagé ou commité
- Ecrire le message du commit
- Modifier le message du dernier commit
- Ajouter un fichier stagé au dernier commit
- Se positionner sur un commit donné
- Revenir à votre branche principale et au commit le plus récent
- Gérer les tags
- Annuler un commit, c'est-à-dire créer un nouveau commit qui fait l'inverse du précédent
- Annuler les changements d'un fichier qui n'ont pas été encore stagé
- Annuler toutes les changements que je n'ai pas encore commités
- Annuler les changements d'un fichier qui a déjà été stagé mais pas commité
- Afficher les commits
- Afficher les modifications d'un commit
- Forcer un push vers une branche distante si on a une erreur
type : "Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart."
- Voir les branches
- Ajouter une nouvelle branche
- Se positionner sur une branche
- Supprimer une branche
- Afficher les remotes d'un repository
- Récupérer les données du dépôt distant
- Récupérer en local les modifications du repo distant
- Pousser les modifications vers une branche distante
- Pousser les tags sur la branche distante
- Supprimer un remote
- Afficher l'ensemble des modifications sur un fichier
- Mettre de côté des modifications
- Merge manuel dans un fichier
- Merger (fusionner) deux branches
- Annuler une tentative de merge lors d'un conflit
- Faire un rebase lors d'un git pull
- Copier un commit sur une autre branche
- Effacer les fichiers qui ne sont pas stagés
- Créer une branche sur le repo distant lors d'un push d'une nouvelle branche
- Commiter seulement certaines modifications d'un même fichier
- Lister les fichiers modifiés

=================================
Terminal Windows
=================================
- Créer un dossier
mkdir cours_git 
// Crée un dossier cours_git dans le dossier courant

- Lister des fichiers
ls 
// liste les fichiers et sous-dossiers du dossier courant
ou
ls cours_git 
// liste les fichiers d'un dossier spécifique

- Afficher le chemin complet d'un dossier
pwd 
// affiche le chemin complet du dossier courant

- Se rendre dans un dossier spécifique
cd /c/Users/jibta/Desktop/projetsJohan/web/cours_git 
// avec un chemin absolu
ou
cd projetsJohan/web/cours_git 
// avec un chemin relatif (si on se trouve dans Desktop par exemple)

- Nettoyer la console
clear

- Revenir à l'invite de commande
ctrl+c

- Ecrire dans un fichier
	echo "Mon site web pour le cours git" > README.md
	// Ecrit le texte dans le fichier README.md

	echo "écriture a la fin du fichier ">> README.md
	// Pour écrire à la fin d'un texte existant (concaténation)

- Afficher le contenu d'un fichier
	cat README.md
	// Affiche le contenu de README.md

- Créer un fichier
	touch .gitignore


=================================
Commandes Git groupées usuelles
=================================
git add . && git commit -m "#2: Modifications"

git add . && git commit -m "#2: Modifications" && git push


=================================
Github
=================================
- Clone repository dans un dossier local (Un dossier est créé avec le nom du repo)
	git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY
	   ex1:
	   git clone https://github.com/johanIbtaten/notes-johan.git (Un dossier notes-johan est créé)

	   git clone https://github.com/johanIbtaten/notes-johan.git notes-apprentissage (Un dossier notes-apprentissage est créé)

	   To clone git repo into the current and empty folder (Mettre un . à la fin)
	   git clone https://github.com/accountName/repoName.git .

- Pushing to a remote repository
	git push  <REMOTENAME> <BRANCHNAME>
	   ex1:
	   git push origin master
	   ou
	   git push // Si on a cloné le repo, pas besoin de préciser les branches

- Adding a remote in the directory your repository is stored at
	git remote remove origin 
	// Si on a cloné un repo distant d'une autre personne on supprime le lien au repo de la personne avant d'ajouter son propre repo distant

	git remote add origin https://github.com/user/repo.git

- Create a new local repository on the command line
	echo "# notes-johan" >> README.md
	git init
	git add README.md
	git commit -m "first commit"
	git remote add origin https://github.com/johanIbtaten/notes-johan.git
	git push -u origin master

	- Push an existing repository from the command line
	git remote add origin https://github.com/johanIbtaten/notes-johan.git
	git push -u origin master

- Clone a Git repository into a specific folder. If you are in the directory you want.
	git clone git@github.com:whatever .
	// The "." at the end specifies the current folder as the checkout folder.

- Associer un commit à une issue dans Github
	git commit -m"#1: ajout du readme"
	// #1 correspond à la référence de l'issue dans Github fixée par le commit

- Visualiser les branches et les commits
	https://github.com/johanIbtaten/mon_site_web/network
	// Ajouter /network après le nom du repo


=================================
Git
=================================
- Lexique
	Repository or Repo or Git repository (Dépôt) : 
		c'est un entrepôt virtuel de votre projet. Il vous permet d'enregistrer 
		les versions de votre code sous forme de commits et d'y accéder au besoin.

	Working tree or Working directory (Répertoire de travail) : 
		ce sont les fichiers sur lesquels on travail actuellement.

	The index or Staging area (Index) : 
		c'est l'endroit où les fichiers sont stagés et suivis pour préparer le prochain commit.

	HEAD : 
		désigne le commit en tête de l’historique, celui sur lequel est positionné le pointeur 
		de l’état courant du repository. C’est en général le dernier commit, 
		sauf si on déplace le HEAD pour revenir en arrière par exemple.

	HEAD^ : 
		désigne le commit précédent HEAD (l’avant dernier en général)

	HEAD~n : 
		désigne le n-ième commit avant le HEAD. Cette syntaxe permet donc de remonter 
		dans la chronologie des commits sans avoir à manipuler leur SHA.

	Branche : 
		ensemble de commit reliés par un pointeur. La branche principale lors 
		de l'initialisation d'un git repository s'appelle master.

	Tags :
		étiquettes placées au niveau des commits. Un tag de branche comme master 
		se place toujours au niveau du dernier commit. Le tag HEAD se place au niveau du commit en cours. 
		Les tags personnalisés sont liés à un commit et ne se déplacent pas, 
		ils permettent de les repérer plus facilement (pour des numéros de versions de projet par exemple). Le tag origin/master se place au niveau du commit où se trouve la branche distante origin

- Git Workflow
	Basic Git workflow :
		1. Modify files in the working tree.
		2. Stage the changes you want to be included in the next commit.
		3. Commit changes. Committing will take the files from the index and store them as a snapshot in the repository.
	
	States of Git files :
		Remember that each file in your working directory can be in one of two states: tracked or untracked. 
		Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. 
		In short, tracked files are files that Git knows about.

		Untracked files are everything else — any files in your working directory that were not in your 
		last snapshot and are not in your staging area. When you first clone a repository, all of your 
		files will be tracked and unmodified because Git just checked them out and you haven’t edited anything.

	When a file is first modified, the change can only be found in the working tree. You must stage the 
	changes you want to be included in your next commit. The index contains all file changes that will 
	be committed. Once you have finished staging files, commit them with a message describing what you changed. 
	The modified files are now safely stored in the repo.
	
- Initialiser un dépôt Git local
	// A la racine du dossier qui contient le projet
	git init

- Configurer Git
	git config --global user.name "johanIbtaten"
	git config --global user.mail "j.ibtaten@hotmail.fr"
	// Renseigne le nom et l'email qui sera utilisé pour les commits

	git config --global --list
	// Affiche la config globale

- Aide de Git
	git
	ou
	git --help

- Executer plusieurs commandes git à la suite
	git add . && git commit -m "updated pom file" && git push
	// On utilise && pour séparer les commandes

	git push --set-upstream origin master && git push --tags

- Force overwrite of local file with what's it origin repo
	// Overwrite only one file
	git fetch
	git checkout origin/master <filepath>

	// Overwrite all changed files
	git fetch
	git reset --hard origin/master

- Supprimer un repository local
	Delete the .git directory in the root-directory of your repository 
	if you only want to delete the git-related information (branches, versions).
	If you want to delete everything (git-data, code, etc), just delete the whole directory.

- Connaitre le status des fichiers (Modifié, Ajouté, Supprimé, etc.)
	git status

- Stager des fichiers
	git add -A 
	// Stage tous les fichiers
	ou
	git add . 
	// Stage tous les fichiers

	git add hello.html style.css 
	// Stage des fichiers spécifiques

- Unstager des fichiers
	git reset -A 
	// Unstage tous les fichiers
	ou
	git reset . 
	// Unstage tous les fichiers

	git reset style.css
	// Unstage un fichier spécifique

	git reset hello.html style.css // Unstage des fichiers spécifiques 

- Voir la différence les fichiers
	La commande git diff permet d’afficher un diff, mais compte tenu des 3 états possibles d’une modification, qui peut être dans le répertoire de travail (working directory), dans l’index (staging area) ou dans le repository, il faut toujours faire attention a ce qu’on compare

	git diff 
	// Donne le diff de ce qui est modifié mais pas encore dans l’index. C’est donc le diff entre le répertoire de travail et l’index. Dès qu’on fait git add sur un fichier modifié, il n’apparait plus dans le diff donné par cette commande.

	git diff hello.html 
	// Donne le diff d'un fichier spécifique de ce qui est modifié mais pas encore dans l’index. C’est donc le diff entre le répertoire de travail et l’index. Dès qu’on fait git add sur un fichier modifié, il n’apparait plus dans le diff donné par cette commande.

	git diff --cached 
	// Donne le diff entre l’index et le repository. Ça donne donc le diff de ce qui est prêt à commit.

	git diff HEAD 
	// Donne le diff de l’état courant par rapport au HEAD, donc inclue tout ce qui est tracked (staged et unstaged). C’est le diff de tout ce qui est versionné, entre le répertoire de travail et le repository.

	git diff HEAD^ 
	// Donne le diff entre le HEAD et la révision précédente. Ce sont les modifications du dernier commit, donc (sauf déplacement du HEAD entre temps).

- Ecrire le message du commit
	git commit -m "Votre nouveau message"

- Modifier le message du dernier commit
	git commit --amend -m "Votre nouveau message"
	// Le SHA-1 du commit est modifié.
	Utiliser cette avant de pousser le commit sinon ne pas l'utiliser

- Ajouter un fichier stagé au dernier commit
 	git commit --amend
 	// Les fichiers stagés sont ajouter au dernier commit
 	Le SHA-1 est modifié.
 	Utiliser cette avant de pousser le commit sinon ne pas l'utiliser

- Se positionner sur un commit donné
	git checkout SHADuCommit
	// Dans Git Bash double clic pour sélectionner le SHA-1 du commit voulu puis clic roulette de la souris pour le coller après checkout.

- Revenir à votre branche principale et au commit le plus récent
	git checkout master

- Gérer les tags
	git tag
	// Liste les tags

	git tag v1.4
	// Se placer d'abord sur le commit voulu avec git checkout SHADuCommit 
	et ensuite créer le tag v1.4

	git tag  v1.4 -m "my version 1.4"
	// Ajoute un tag avec un message descriptif

	git tag --delete v1.4
	// Supprime le tag v1.4

- Annuler un commit, c'est-à-dire créer un nouveau commit qui fait l'inverse du précédent
	git revert SHADuCommit

- Annuler les changements d'un fichier qui n'ont pas été encore stagé
	git reset -- style.css	

- Annuler toutes les changements que je n'ai pas encore commités
	git reset --hard‌

- Annuler les changements d'un fichier qui a déjà été stagé mais pas commité
	git checkout .gitignore

- Afficher les commits
	git log
	// Affiche tous les commits au niveau et avant le tag HEAD. Le tag master indique le dernier commit. Le tag HEAD indique sur quel commit se trouve la version du projet en court.
	//Taper q pour sortir de l'affichage de git log quand on est dans la console

	git log -2
	// Affiche les n derniers commit. Ici les deux derniers.

	git log --stat
	// Affiche les commits et les fichiers modifiés

	git log BRANCH_A_MERGE
	// Affiche les commits d'une branche spécifique

- Afficher les modifications d'un commit
	git show 4aaeefebb6350bf5460d1127899294864ecb49d4
	// git show suivi du SHA-1 du commit

	git show master
	// Affiche les modifications du commit au niveau du tag master qui est le dernier commit.

	git show MON_SITE_V1
	// Affiche les modifications au niveau de ce tag et le message associé à ce tag si il y en a un.

- Forcer un push vers une branche distante si on a une erreur
type : "Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart."
	git push -f heroku master

- Voir les branches
	git branch

	git branch -a
	// Affiche les branches locales et distantes

- Ajouter une nouvelle branche
	git branch littlefeature

	git checkout -b BRANCH_A_REBASE
	// Permet de créer une branche et se positionner dessus
	Si on à fait au préalable un checkout sur un commit
	spécifique la branche est créé à partir de ce commit

	git checkout BRANCH_DISTANTE
	// Crée en local la branche distante et se positionne dessus	

- Se positionner sur une branche
	git checkout littlefeature	

- Supprimer une branche
	// Se positionner sur une autre branche que celle à supprimer
	git branch -d BRANCH_A_SUPPRIMER

	git push origin --delete BRANCH_A_SUPPRIMER
	// Supprime la branche distante

- Afficher les remotes d'un repository
	git remote -v

	git remote show origin
	// Affiche les informations d'un remote spécifique

- Récupérer les données du dépôt distant
	git fetch
	// Cette commande s'adresse au dépôt distant et récupère toutes les données de ce projet que vous ne possédez pas déjà. Après cette action, vous possédez toutes les références à toutes les branches contenues dans ce dépôt, que vous pouvez fusionner ou inspecter à tout moment.

- Récupérer en local les modifications d'une branche distante
	git pull origin
	ou
	git pull 
	// Si on a cloné le repo, pas besoin de préciser le repo distant.
	Quand on fait un git pull, git fetch est automatiquement appelé avant
	d'essayer de faire le merge avec la branche distante

- Pousser les modifications vers une branche distante
	git push origin master 
	// Pousse les modifications vers la branche distante origin depuis la branche locale master.

- Pousser les tags sur la branche distante
	git push MON_SITE_V1
	// Pour pousser un tag spécifique.

	git push --tags
	// Pour pousser tous les tags. Si la branche distante n'est pas précisée
	Git pousse vers origin. On peut les retrouver dans Github dans releases

- Supprimer un remote
	git remote remove origin
	// On supprime le remote origin

- Afficher l'ensemble des modifications sur un fichier
	git blame hello.html
	// Dans la console le chapeau devant le SHA-1 représente le commit qui
	a créer le fichier.

	git blame -L 10,20 hello.html
	// Affiche entre la ligne 10 et 20

	git blame -L 10,+4 hello.html
	// Affiche 4 lignes à partir de la ligne 10 incluse

- Le fichier .gitignore
	// .gitignore exclu des fichiers ou dossiers du versioning
	// Les chemins sont relatifs par rapport... 
	// ... à l'emplacement du fichier .gitignore
	tmp/todo.txt
	tmp/* // Exclu tous les fichiers de tmp
	*.txt // Exclu tous les fichiers avec l'extension .txt

- Mettre de côté des modifications
	git stash save "Modifications de gitignore"
	// Sauvegarde les modifications en cours dans un stash avec son message
	de description. Penser à stager les fichiers qui ne sont pas trackés si on veut les inclures dans le stash

	git stash list
	// Liste les stashs avec leur index et leur message

	git stash show
	// Affiche un résumé des modifications du dernier stash

	git stash show stash@{1}
	// Affiche un résumé des modifications d'un stash spécifique

	git stash show -p
	// Affiche l'ensemble des modifications d'un stash

	git stash pop
	// Applique le dernier stash, soit stash@{0}
	puis l'efface de la pile de stash

	git stash apply stash@{1}
	// Applique un stash spécifique	
	puis l'efface de la pile de stash

	git stash apply
	// Applique le dernier stash, soit stash@{0}
	sans l'effacer de la pile de stash

	git stash apply stash@{1}
	// Applique un stash spécifique	
	sans l'effacer de la pile de stash

	git stash branch test
	// Crée une nouvelle branche avant d'appliquer le dernier stash

	git stash branch test stash@{1}
	// Crée une nouvelle branche avant d'appliquer un stash spécifique

	git stash clear
	// Supprime tous les stash du repository

	git stash drop
	// Supprime le dernier stash de la pile

	git stash drop stash@{1}
	// Supprime un stash spécifique de la pile

- Merge manuel dans un fichier
	// Si on essaye de faire un git pull et qu'il apparait un conflit
	car la même ligne est modifiée de façons différentes. Git ne sait
	pas si il doit conserver l'une ou l'autre des lignes ou les deux.
	Il faut donc ouvre le fichier concerné par le conflit restructurer
	le fichier pour résoudre le conflit en effaçant les lignes de conflit
	ajoutées par Git. Il faut ensuite stager le fichier une fois le
	conflit réglé pour finir le merge
	// On ne peux pas pousser sur une branche distante deux commits qui
	ont le même commit parent. On doit récupérer le commit distant qui a le
	même parent que notre commit que l'on veux pousser, le merger avec
	notre commit puis faire un commit de merge que l'on poussera sur la 
	branche distante.

	EX:
	// Avant le merge, il y a un conflit sur la ligne 2
	tmp/todo.txt
	<<<<<<< Updated upstream
	tmp/*
	=======
	*.txt
	>>>>>>> Stashed changes

	// Après le merge, gestion manuel du conflit
	tmp/todo.txt
	tmp/*
	*.txt

	EX:
	// Avant le merge, il y a un conflit sur la ligne 3
	// HEAD montre la version du répertoire de travail
	// b776d... montre le commit que l'on essaye de merger 
	tmp/todo.txt
	tmp/*
	<<<<<<< HEAD
	*.xml
	=======
	*.txt
	>>>>>>> b776d8a0db34faa00aee48ce171fc5611596f990

	// Après le merge, gestion manuel du conflit
	tmp/todo.txt
	tmp/*
	*.xml
	*.txt

- Merger (fusionner) deux branches
	git merge BRANCH_A_MERGE
	// Si conflit voir "- Merge manuel dans un fichier" au-dessus

- Annuler une tentative de merge lors d'un conflit
	// Revenir à l'état du répertoire de travail avant le conflit
	git merge --abort

- Faire un rebase lors d'un git pull
	git pull --rebase
	// Permet d'importer le commit de la branche distante qui a 
	le même parent que notre dernier commit. Si le merge s'effectue automatique,
	le commit importé devient le parent de notre dernier commit, pour éviter 
	deux commits avec le même parent.

- Fusionner deux branches avec git rebase
	// Se positionner sur la branche que l'on souhaite fusionner sur master
	git rebase master
	// Résoudre les éventuels conflits
	// Stager les fichiers qui avaient un conflit
	git rebase --continue
	// Permet d'appliquer le rebase
	// Se positionner sur master
	git merge BRANCH_A_REBASE
	// Pour fusionner les deux branches
	// On peut supprimer la branche à rebase si besoin

	git rebase --abort
	// Annule le rebase et revient à l'état d'avant si il y a un conflit 

- Copier un commit sur une autre branche
	// Récupérer le SHA-1 d'un commit d'une branche, 8 caractères suffisent
	// Se placer sur la branche de destination
	// Executer la commande qui va appliquer le commit qui a été copié
	git cherry-pick ee274f0c19330f9f4884cec69f637d55176d04ae

	git cherry-pick --abort
	// Annule un cherry-pick avec un conflit et retourne 
	à l'état avant le cherry-pick

- Effacer les fichiers qui ne sont pas stagés
	git clean -df
	// -df indique effacer les dossiers et les fichiers qui ne sont pas stagés

- Créer une branche sur le repo distant lors d'un push d'une nouvelle branche
	git push --set-upstream origin BRANCH_A_MERGE

- Commiter seulement certaines modifications d'un même fichier
	// Dans Git GUI sélectionner un fichier unstaged avec plusieurs
	modifications à plusieurs endroits du fichier.
	// Sélectionner les lignes que l'on veux placer dans le commit
	// Faire clique droit et cliquer sur "Stage Lines For Commit"
	// Le fichier est alors staged et reste aussi unstaged pour
	les modifications qui restent
	// Cela équivaut à utiliser la commande git add --patch

- Lister les fichiers modifiés
	git ls-files --modified


 